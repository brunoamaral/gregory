# Generated by nginxconfig.io
# https://www.digitalocean.com/community/tools/nginx?domains.0.server.domain=DOMAIN.ORG&domains.0.https.letsEncryptEmail=bruno%40lisboncollective.com&domains.0.php.php=false&domains.0.routing.index=index.html&domains.0.routing.fallbackHtml=true&domains.0.routing.fallbackPhp=false&domains.0.logging.errorLog=true&domains.1.server.domain=nodered.DOMAIN.ORG&domains.1.php.php=false&domains.1.reverseProxy.reverseProxy=true&domains.1.reverseProxy.proxyPass=http%3A%2F%2F127.0.0.1%3A1880&domains.1.routing.root=false&domains.1.routing.index=index.html&domains.1.logging.errorLog=true&domains.2.server.domain=api.DOMAIN.ORG&domains.2.php.php=false&domains.2.reverseProxy.reverseProxy=true&domains.2.reverseProxy.proxyPass=http%3A%2F%2F127.0.0.1%3A8000&domains.2.routing.root=false&domains.3.server.domain=metabase.DOMAIN.ORG&domains.3.php.php=false&domains.3.reverseProxy.reverseProxy=true&global.tools.modularizedStructure=false

################
# INSTRUCTIONS #
################

###
# STEP 1 
### 

# Navigate to your NGINX configuration directory on your server:
# cd /etc/nginx

# Create a backup of your current NGINX configuration:
# tar -czvf nginx_$(date +'%F_%H-%M-%S').tar.gz nginx.conf sites-available/ sites-enabled/ nginxconfig.io/

# Extract the new compressed configuration archive using tar:
# tar -xzvf nginxconfig.io-fmul.org,nodered.fmul.org,admin.fmul.org,metabase.fmul.org.tar.gz | xargs chmod 0644

###
# STEP 2
### 

# Generate Diffie-Hellman keys by running this command on your server:
# openssl dhparam -out /etc/nginx/dhparam.pem 2048

# Create a common ACME-challenge directory (for Let's Encrypt):
# mkdir -p /var/www/_letsencrypt
# chown www-data /var/www/_letsencrypt

###
# STEP 3
###

# Comment out SSL related directives in the configuration:

# sed -i -r 's/(listen .*443)/\1; #/g; s/(ssl_(certificate|certificate_key|trusted_certificate) )/#;#\1/g; s/(server \{)/\1\n    ssl off;/g' /etc/nginx/nginx.conf
# Reload your NGINX server:

# sudo nginx -t && sudo systemctl reload nginx
# Obtain SSL certificates from Let's Encrypt using Certbot:

# certbot certonly --webroot -d fmul.org --email bruno@lisboncollective.com -w /var/www/_letsencrypt -n --agree-tos --force-renewal
# certbot certonly --webroot -d nodered.fmul.org --email info@nodered.fmul.org -w /var/www/_letsencrypt -n --agree-tos --force-renewal
# certbot certonly --webroot -d admin.fmul.org --email info@admin.fmul.org -w /var/www/_letsencrypt -n --agree-tos --force-renewal
# certbot certonly --webroot -d metabase.fmul.org --email info@metabase.fmul.org -w /var/www/_letsencrypt -n --agree-tos --force-renewal
# Uncomment SSL related directives in the configuration:

# sed -i -r -z 's/#?; ?#//g; s/(server \{)\n    ssl off;/\1/g' /etc/nginx/nginx.conf
# Reload your NGINX server:

# sudo nginx -t && sudo systemctl reload nginx
# Configure Certbot to reload NGINX when it successfully renews certificates:

# echo -e '#!/bin/bash\nnginx -t && systemctl reload nginx' | sudo tee /etc/letsencrypt/renewal-hooks/post/nginx-reload.sh
# sudo chmod a+x /etc/letsencrypt/renewal-hooks/post/nginx-reload.sh

###
# STEP 4
###

# Reload NGINX to load in your new configuration:
# sudo nginx -t && sudo systemctl reload nginx



user                 www-data;
pid                  /run/nginx.pid;
worker_processes     auto;
worker_rlimit_nofile 65535;

# Load modules
include              /etc/nginx/modules-enabled/*.conf;

events {
    multi_accept       on;
    worker_connections 65535;
}

http {
    charset                utf-8;
    sendfile               on;
    tcp_nopush             on;
    tcp_nodelay            on;
    server_tokens          off;
    log_not_found          off;
    types_hash_max_size    2048;
    types_hash_bucket_size 64;
    client_max_body_size   16M;

    # MIME
    include                mime.types;
    default_type           application/octet-stream;

    # Logging
    access_log             /var/log/nginx/access.log;
    error_log              /var/log/nginx/error.log warn;

    # SSL
    ssl_session_timeout    1d;
    ssl_session_cache      shared:SSL:10m;
    ssl_session_tickets    off;

    # Diffie-Hellman parameter for DHE ciphersuites
    ssl_dhparam            /etc/nginx/dhparam.pem;

    # Mozilla Intermediate configuration
    ssl_protocols          TLSv1.2 TLSv1.3;
    ssl_ciphers            ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    # OCSP Stapling
    ssl_stapling           on;
    ssl_stapling_verify    on;
    resolver               1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
    resolver_timeout       2s;

    # Connection header for WebSocket reverse proxy
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ""      close;
    }

    map $remote_addr $proxy_forwarded_elem {

        # IPv4 addresses can be sent as-is
        ~^[0-9.]+$        "for=$remote_addr";

        # IPv6 addresses need to be bracketed and quoted
        ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";

        # Unix domain socket names cannot be represented in RFC 7239 syntax
        default           "for=unknown";
    }

    map $http_forwarded $proxy_add_forwarded {

        # If the incoming Forwarded header is syntactically valid, append to it
        "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

        # Otherwise, replace it
        default "$proxy_forwarded_elem";
    }

    # Load configs
    include /etc/nginx/conf.d/*.conf;

    # DOMAIN.ORG
    server {
        listen                               443 ssl http2;
        listen                               [::]:443 ssl http2;
        server_name                          DOMAIN.ORG;
        root                                 /var/www/DOMAIN.ORG/public;

        # SSL
        ssl_certificate                      /etc/letsencrypt/live/DOMAIN.ORG/fullchain.pem;
        ssl_certificate_key                  /etc/letsencrypt/live/DOMAIN.ORG/privkey.pem;
        ssl_trusted_certificate              /etc/letsencrypt/live/DOMAIN.ORG/chain.pem;

        # security headers
        add_header X-XSS-Protection          "1; mode=block" always;
        add_header X-Content-Type-Options    "nosniff" always;
        add_header Referrer-Policy           "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy   "default-src 'self' http: https: ws: wss: data: blob: 'unsafe-inline'; frame-ancestors 'self';" always;
        add_header Permissions-Policy        "interest-cohort=()" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # . files
        location ~ /\.(?!well-known) {
            deny all;
        }

        # logging
        error_log /var/log/nginx/DOMAIN.ORG.error.log warn;

        # index.html fallback
        location / {
            try_files $uri $uri/ /index.html;
        }

        # favicon.ico
        location = /favicon.ico {
            log_not_found off;
            access_log    off;
        }

        # robots.txt
        location = /robots.txt {
            log_not_found off;
            access_log    off;
        }

        # gzip
        gzip            on;
        gzip_vary       on;
        gzip_proxied    any;
        gzip_comp_level 6;
        gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;
    }

    # subdomains redirect
    server {
        listen                  443 ssl http2;
        listen                  [::]:443 ssl http2;
        server_name             *.DOMAIN.ORG;

        # SSL
        ssl_certificate         /etc/letsencrypt/live/DOMAIN.ORG/fullchain.pem;
        ssl_certificate_key     /etc/letsencrypt/live/DOMAIN.ORG/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/DOMAIN.ORG/chain.pem;
        return                  301 https://DOMAIN.ORG$request_uri;
    }

    # HTTP redirect
    server {
        listen      80;
        listen      [::]:80;
        server_name .DOMAIN.ORG;

        # ACME-challenge
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/_letsencrypt;
        }

        location / {
            return 301 https://DOMAIN.ORG$request_uri;
        }
    }

    # nodered.DOMAIN.ORG
    server {
        listen                               443 ssl http2;
        listen                               [::]:443 ssl http2;
        server_name                          nodered.DOMAIN.ORG;

        # SSL
        ssl_certificate                      /etc/letsencrypt/live/nodered.DOMAIN.ORG/fullchain.pem;
        ssl_certificate_key                  /etc/letsencrypt/live/nodered.DOMAIN.ORG/privkey.pem;
        ssl_trusted_certificate              /etc/letsencrypt/live/nodered.DOMAIN.ORG/chain.pem;

        # security headers
        add_header X-XSS-Protection          "1; mode=block" always;
        add_header X-Content-Type-Options    "nosniff" always;
        add_header Referrer-Policy           "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy   "default-src 'self' http: https: ws: wss: data: blob: 'unsafe-inline'; frame-ancestors 'self';" always;
        add_header Permissions-Policy        "interest-cohort=()" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # . files
        location ~ /\.(?!well-known) {
            deny all;
        }

        # logging
        error_log /var/log/nginx/nodered.DOMAIN.ORG.error.log warn;

        # reverse proxy
        location / {
            proxy_pass                         http://127.0.0.1:1880;
            proxy_http_version                 1.1;
            proxy_cache_bypass                 $http_upgrade;

            # Proxy headers
            proxy_set_header Upgrade           $http_upgrade;
            proxy_set_header Connection        $connection_upgrade;
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header Forwarded         $proxy_add_forwarded;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host  $host;
            proxy_set_header X-Forwarded-Port  $server_port;

            # Proxy timeouts
            proxy_connect_timeout              60s;
            proxy_send_timeout                 60s;
            proxy_read_timeout                 60s;
        }

        # favicon.ico
        location = /favicon.ico {
            log_not_found off;
            access_log    off;
        }

        # robots.txt
        location = /robots.txt {
            log_not_found off;
            access_log    off;
        }

        # gzip
        gzip            on;
        gzip_vary       on;
        gzip_proxied    any;
        gzip_comp_level 6;
        gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;
    }

    # subdomains redirect
    server {
        listen                  443 ssl http2;
        listen                  [::]:443 ssl http2;
        server_name             *.nodered.DOMAIN.ORG;

        # SSL
        ssl_certificate         /etc/letsencrypt/live/nodered.DOMAIN.ORG/fullchain.pem;
        ssl_certificate_key     /etc/letsencrypt/live/nodered.DOMAIN.ORG/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/nodered.DOMAIN.ORG/chain.pem;
        return                  301 https://nodered.DOMAIN.ORG$request_uri;
    }

    # HTTP redirect
    server {
        listen      80;
        listen      [::]:80;
        server_name .nodered.DOMAIN.ORG;

        # ACME-challenge
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/_letsencrypt;
        }

        location / {
            return 301 https://nodered.DOMAIN.ORG$request_uri;
        }
    }

    # api.DOMAIN.ORG
    server {
        listen                               443 ssl http2;
        listen                               [::]:443 ssl http2;
        server_name                          api.DOMAIN.ORG;

    	set $base /var/www/api.DOMAIN.ORG;
	    root $base/;
        # SSL
        ssl_certificate                      /etc/letsencrypt/live/api.DOMAIN.ORG/fullchain.pem;
        ssl_certificate_key                  /etc/letsencrypt/live/api.DOMAIN.ORG/privkey.pem;
        ssl_trusted_certificate              /etc/letsencrypt/live/api.DOMAIN.ORG/chain.pem;

        # security headers
        add_header X-XSS-Protection          "1; mode=block" always;
        add_header X-Content-Type-Options    "nosniff" always;
        add_header Referrer-Policy           "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy   "default-src 'self' http: https: ws: wss: data: blob: 'unsafe-inline'; frame-ancestors 'self';" always;
        add_header Permissions-Policy        "interest-cohort=()" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # . files
        location ~ /\.(?!well-known) {
            deny all;
        }
        # Django media
        location /media/ {
            alias $base/media/;
        }

        # Django static
        location /static/ {
            alias $base/static/;
        }
        # reverse proxy
        location / {
            proxy_pass                         http://127.0.0.1:8000;
            proxy_http_version                 1.1;
            proxy_cache_bypass                 $http_upgrade;

            # Proxy headers
            proxy_set_header Upgrade           $http_upgrade;
            proxy_set_header Connection        $connection_upgrade;
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header Forwarded         $proxy_add_forwarded;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host  $host;
            proxy_set_header X-Forwarded-Port  $server_port;

            # Proxy timeouts
            proxy_connect_timeout              60s;
            proxy_send_timeout                 60s;
            proxy_read_timeout                 60s;
        }

        # favicon.ico
        location = /favicon.ico {
            log_not_found off;
            access_log    off;
        }

        # robots.txt
        location = /robots.txt {
            log_not_found off;
            access_log    off;
        }

        # gzip
        gzip            on;
        gzip_vary       on;
        gzip_proxied    any;
        gzip_comp_level 6;
        gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;
    }

    # subdomains redirect
    server {
        listen                  443 ssl http2;
        listen                  [::]:443 ssl http2;
        server_name             *.api.DOMAIN.ORG;

        # SSL
        ssl_certificate         /etc/letsencrypt/live/api.DOMAIN.ORG/fullchain.pem;
        ssl_certificate_key     /etc/letsencrypt/live/api.DOMAIN.ORG/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/api.DOMAIN.ORG/chain.pem;
        return                  301 https://api.DOMAIN.ORG$request_uri;
    }

    # HTTP redirect
    server {
        listen      80;
        listen      [::]:80;
        server_name .admin.DOMAIN.ORG;

        # ACME-challenge
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/_letsencrypt;
        }

        location / {
            return 301 https://admin.DOMAIN.ORG$request_uri;
        }
    }

    # metabase.DOMAIN.ORG
    server {
        listen                               443 ssl http2;
        listen                               [::]:443 ssl http2;
        server_name                          metabase.DOMAIN.ORG;
        root                                 /var/www/metabase.DOMAIN.ORG/public;

        # SSL
        ssl_certificate                      /etc/letsencrypt/live/metabase.DOMAIN.ORG/fullchain.pem;
        ssl_certificate_key                  /etc/letsencrypt/live/metabase.DOMAIN.ORG/privkey.pem;
        ssl_trusted_certificate              /etc/letsencrypt/live/metabase.DOMAIN.ORG/chain.pem;

        # security headers
        add_header X-XSS-Protection          "1; mode=block" always;
        add_header X-Content-Type-Options    "nosniff" always;
        add_header Referrer-Policy           "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy   "default-src 'self' http: https: ws: wss: data: blob: 'unsafe-inline'; frame-ancestors 'self';" always;
        add_header Permissions-Policy        "interest-cohort=()" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # . files
        location ~ /\.(?!well-known) {
            deny all;
        }

        # index.php
        index index.php;

        # reverse proxy
        location / {
            proxy_pass                         http://127.0.0.1:3000;
            proxy_http_version                 1.1;
            proxy_cache_bypass                 $http_upgrade;

            # Proxy headers
            proxy_set_header Upgrade           $http_upgrade;
            proxy_set_header Connection        $connection_upgrade;
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header Forwarded         $proxy_add_forwarded;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host  $host;
            proxy_set_header X-Forwarded-Port  $server_port;

            # Proxy timeouts
            proxy_connect_timeout              60s;
            proxy_send_timeout                 60s;
            proxy_read_timeout                 60s;
        }

        # favicon.ico
        location = /favicon.ico {
            log_not_found off;
            access_log    off;
        }

        # robots.txt
        location = /robots.txt {
            log_not_found off;
            access_log    off;
        }

        # gzip
        gzip            on;
        gzip_vary       on;
        gzip_proxied    any;
        gzip_comp_level 6;
        gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;
    }

    # subdomains redirect
    server {
        listen                  443 ssl http2;
        listen                  [::]:443 ssl http2;
        server_name             *.metabase.DOMAIN.ORG;

        # SSL
        ssl_certificate         /etc/letsencrypt/live/metabase.DOMAIN.ORG/fullchain.pem;
        ssl_certificate_key     /etc/letsencrypt/live/metabase.DOMAIN.ORG/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/metabase.DOMAIN.ORG/chain.pem;
        return                  301 https://metabase.DOMAIN.ORG$request_uri;
    }

    # HTTP redirect
    server {
        listen      80;
        listen      [::]:80;
        server_name .metabase.DOMAIN.ORG;

        # ACME-challenge
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/_letsencrypt;
        }

        location / {
            return 301 https://metabase.DOMAIN.ORG$request_uri;
        }
    }
}